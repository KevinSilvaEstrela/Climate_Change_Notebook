# -*- coding: utf-8 -*-
"""Climate Change Notebook

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Oi9s64ghycW0RL4uOJaoDG-NhP1Nezvm

## **Etapa 1 - Seleção:**

Para fazer a seleção dos dados é preciso importar a biblioteca "Pandas" e dar o apelido "PD" para facilitar seu uso. Depois é criada uma variável para receber os dados, nesse caso vamos chama-lá de df(Dataframe), podendo ser qualquer nome. Em seguida utilizamos o método "read_cvs" para ler o arquivo. Este método é usado para arquivos CSV(Comma Separeted Values - Valores separados por vírgula), mas existem métodos para diversos formatos de arquivo, como excel, sql, tsv, etc...
"""

import pandas as pd

df = pd.read_csv("/content/climate_change_indicators.csv")

# Printando o DataFrame
df

# Usamos o método "head" para listar as 5 primeiras linhas do DataFrame.
df.head()

df.tail()

"""## Etapa 2 - Pré-processamento:

É possível observar que existem linhas com valores nulos, mas para ter certeza da quantidade e se vai afetar o DataFrame vamos usar a biblioteca "Missingno" para saber com precisão a quantidade de linhas nulas.
"""

import missingno as msno

# Gerando uma matrix com os dados. Cada linha branca são os valores nulos
msno.matrix(df, figsize=(10, 8))

# Dropna exclui as linhas com valores nulos. Adicionando o parametro 'Inplace = True' para modificar o dataframe original
df.dropna(inplace = True)

# Podemos ver que as linhas com valores nulos foram removidas
df

"""## Etapa 3 - Transformação:

Após remover as linhas com valores vazios, podemos notar que o index numérico do dataframe não foi alterado, o que poderia causar problemas na hora de manipula-lo. Vamos então resetar o index para normalizar a manipulação do dataframe.
"""

# Resetando o index original e modificando o dataframe
df.reset_index(drop = True, inplace = True)

# O index anterior foi descartado e foi gerado um novo
df

"""## Etapa 4 - Mineração de dados:

Existem diversas ferramentas no Pandas para obter informações a respeito do DataFrame. Podemos saber a quantidade de linhas e colunas com o método "Shape", os tipos de variaveis de cada coluna com o "Info" e informações Estatísticas com o "Describe"
"""

# A quantidade de linhas e colunas respectivamente
df.shape

# Retorna informações sobre dados numéricos, como a quantidade de valores, a média, o valor mínimo e o máximo
df.describe()

# Aqui obtemos informações sobre os tipos de valores do DataFrame. o tipo Object é para Strings, e podemos ver que todas as colunas numéricas são Float
df.info()

# Criando uma função para gerar uma coluna com a média dos valores de todas as linhas
def calcular_media_linha(df):
  medias = []
  for i in range(df.shape[0]):
    # Acessa os valores das linhas com valores numéricos
    linha = df.iloc[i, 11:]
    # Calcula a média da linha
    media = linha.mean()

    # Adiciona a média à lista de médias
    medias.append(media)

  return medias

# Calcula a média de cada linha
medias_linhas = calcular_media_linha(df)
# Cria uma coluna chamada 'Média' e adiciona ao dataframe
df['Media'] = medias_linhas

df

"""## Etapa 5: Interpretação e Avaliação:

Para interpretar os resultados são utilizadas várias técnicas, no caso utilizaremos Dashboards para compreender melhor as informações.
"""

# Biblioteca para gerar gráficos 2D e 3D
import matplotlib.pyplot as plt

# Filtrando os dados apenas do Brasil
x = df.iloc[26, 11:]

# Gerando um gráfico de linhas com os dados
x.plot()
plt.title('Aumento de temperatura ao longo dos anos no Brasil')
plt.show()

# Printando a média do Brasil
print(f'\nA média de aumento de temperatura é de {x.mean():.2f}° Celsius\n')

# Biblioteca para criar gráficos 2D
import seaborn as sns

# Importando os dados do dataframe
data = df.iloc[0:, 11:]
# gerando um mapa de calor
sns.heatmap(data, yticklabels=False)

# Biblioteca para dados geográficos
import geopandas as gpd

# Carregando o mapa-múndi
world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))

# Juntando o DataFrame com o mapa-múndi
world = world.merge(df, how='left', left_on='name', right_on='Country')

# Plotando o mapa-múndi
fig, ax = plt.subplots(1, 1, figsize=(10, 6))
world.plot(column='Media', cmap='OrRd', linewidth=0.8, ax=ax, edgecolor='0.8', legend=True)
plt.title('Mapa-Múndi por Valor médio de cada país')
plt.axis('off')
plt.show()